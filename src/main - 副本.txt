#include<iostream>
#include<aris.h>




using namespace std;
using namespace aris::plan;


struct MoveJSParam
{
	int total_time;
	int left_time;
};

class MoveJS : public aris::plan::Plan
{
public:
	//params是map，其中包含键和值。
	auto virtual prepairNrt(const std::map<std::string, std::string> &params, PlanTarget &target)->void
	{
		//std::cout << "prepair:"<<std::stoi(params.at("total_time"))<<std::endl;
		
		MoveJSParam param;
		param.total_time = std::stoi(params.at("total_time"));
		param.left_time = 0;

		
		target.param = param;
		target.option |= USE_TARGET_POS;
	}
	//实时核函数
	auto virtual executeRT(PlanTarget &target)->int
	{
		MoveJSParam param = std::any_cast<MoveJSParam>(target.param);
		//将任意类型转化为int
		static double begin_pe[6]{ 0,0,0,0,0,0 };
		//在第一个运行的时候获取当前的位姿，并设置欧拉角是321，generalMotionPool()[0]后面的0指的是第一个终端
		if (target.count == 1)
		{
			target.model->generalMotionPool()[0].getMpe(begin_pe, "321");
		}

		

		double pe[6];
		//查询？？？
		std::copy_n(begin_pe, 6, pe);
		//1.0*target.count的作用是将其转化为double型
		pe[0] = begin_pe[0] + 0.1*(1 - std::cos(1.0*target.count / param.total_time * 2 * aris::PI));
		
		target.model->generalMotionPool()[0].setMpe(pe, "321");
		target.model->solverPool()[0].kinPos();


		if(target.count % 100 == 0)aris::dynamic::dsp(1, 6, pe);
		
		
		return param.total_time - target.count;
	}
	auto virtual collectNrt(PlanTarget &target)->void {}

	explicit MoveJS(const std::string &name = "myplan") :Plan(name)
	{
		command().loadXmlStr(
			"<myplan>"
			"	<total_time type=\"Param\" default=\"5000\"/>"
			"</myplan>");
	}
};


//sudo cmake ../aris/ -DUSE_ETHERLAB=ON -DUSE_XENOMAI=ON，其中，argc=4,argv是数组指针，指
//"cmake"、“../aris”、“-DUSE_ETHERLAB=ON”、“-DUSE_XENOMAI=ON”
int main(int argc, char *argv[])
{
	std::cout << "hello world" << std::endl;

	auto&cs = aris::server::ControlServer::instance();

	cs.resetController(aris::robot::createControllerRokaeXB4().release());
	cs.resetModel(aris::robot::createModelRokaeXB4().release());
	cs.resetPlanRoot(aris::robot::createPlanRootRokaeXB4().release());

	cs.planRoot().planPool().add<MoveJS>();

	cs.start();

	for (std::string command_in; std::getline(std::cin, command_in);)
	{
		//检查数据
		try
		{
			auto id = cs.executeCmd(aris::core::Msg(command_in));
			std::cout << "command id:" << id << std::endl;
		}
		catch (std::exception &e)
		{
			std::cout << e.what() << std::endl;
			//LOG_ERROR << e.what() << std::endl;
		}
	}





	char ch;
	std::cin >> ch;
}